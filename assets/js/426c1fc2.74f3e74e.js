"use strict";(self.webpackChunkmobile_pay_merchant_payments_documentation=self.webpackChunkmobile_pay_merchant_payments_documentation||[]).push([[1082],{15680:(e,r,t)=>{t.d(r,{xA:()=>l,yg:()=>m});var n=t(96540);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function s(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?s(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=n.createContext({}),c=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},l=function(e){var r=c(e.components);return n.createElement(p.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},b=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,s=e.originalType,p=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),u=c(t),b=i,m=u["".concat(p,".").concat(b)]||u[b]||d[b]||s;return t?n.createElement(m,o(o({ref:r},l),{},{components:t})):n.createElement(m,o({ref:r},l))}));function m(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var s=t.length,o=new Array(s);o[0]=b;var a={};for(var p in r)hasOwnProperty.call(r,p)&&(a[p]=r[p]);a.originalType=e,a[u]="string"==typeof e?e:i,o[1]=a;for(var c=2;c<s;c++)o[c]=t[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}b.displayName="MDXCreateElement"},64966:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var n=t(58168),i=(t(96540),t(15680));const s={sidebar_position:4},o="Subscriptions Providers",a={unversionedId:"subscriptions/subscriptions-providers",id:"subscriptions/subscriptions-providers",title:"Subscriptions Providers",description:"Order MobilePay Subscriptions",source:"@site/docs/subscriptions/subscriptions-providers.md",sourceDirName:"subscriptions",slug:"/subscriptions/subscriptions-providers",permalink:"/docs/subscriptions/subscriptions-providers",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docsSidebar",previous:{title:"General notes",permalink:"/docs/subscriptions/general-notes"},next:{title:"Agreements",permalink:"/docs/subscriptions/agreement"}},p={},c=[{value:"Order MobilePay Subscriptions",id:"order-mobilepay-subscriptions",level:2},{value:"Getting a list of subscription providers",id:"getting-a-list-of-subscription-providers",level:2},{value:"Updating subscription provider",id:"updating-subscription-provider",level:2}],l={toc:c},u="wrapper";function d(e){let{components:r,...t}=e;return(0,i.yg)(u,(0,n.A)({},l,t,{components:r,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"subscriptions-providers"},"Subscriptions Providers"),(0,i.yg)("h2",{id:"order-mobilepay-subscriptions"},"Order MobilePay Subscriptions"),(0,i.yg)("p",null,"Before using MobilePay Subscriptions, the merchant must have at least one Subscriptions provider which can be created via ",(0,i.yg)("a",{parentName:"p",href:"https://admin.mobilepay.dk/"},"MobilePay Portal - Denmark")," or  ",(0,i.yg)("a",{parentName:"p",href:"https://admin.mobilepay.fi/"},"MobilePay Portal - Finland"),". The merchant can have multiple providers, which is why the integrator must support having more than one providers, since merchants might have multiple brands with different product offerings."),(0,i.yg)("h2",{id:"getting-a-list-of-subscription-providers"},"Getting a list of subscription providers"),(0,i.yg)("p",null,"After getting an access token, you will be able to list subscription providers associated with that merchant by calling ",(0,i.yg)("inlineCode",{parentName:"p"},"GET /api/merchants/me"),", which will return a list of all subscription providers, associated with that merchant. Each subscriptions provider contains its own address information, homepage url and etc. The merchant is the customer company and the SubscriptionsProvider ID is the actual service provider name under which they send subscriptions payments  "),(0,i.yg)("p",null,"Providers represents your customer (which is a MobilePay Merchant).\n",(0,i.yg)("inlineCode",{parentName:"p"},"providerId")," represents a particular subscription provider."),(0,i.yg)("p",null,"For example, if a single merchant has several brands, then each brand would be a subscription provider. Currently, a merchant grants you permission to all their subscription providers."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",200:!0,className:"language-json",metastring:'title="HTTP 200 Response body example"',title:'"HTTP',Response:!0,body:!0,'example"':!0},'[\n  {\n    "Id": "a863d62e-d53b-4651-9b7b-c80792ee1343",\n    "SubscriptionProviders": [\n      {\n        "SubscriptionProviderId": "b45afee5-703c-4136-8f60-162fc01709df",\n        "Name": "Name of your subscription product",\n        "HomepageUrl": "https://merchant.dk",\n        "CustomerServiceEmail": "customerservice@merchant.dk",\n        "SelfServicePortalUrl": "https://merchant.dk/self-service",\n        "FaqUrl": "https://merchant.dk/faq",\n        "Status": "Enabled" || "Pending",\n        "Address": "Your address line",\n        "ZipCode": "1234",\n        "City": "City"\n      }\n    ]\n  }\n]\n')),(0,i.yg)("h2",{id:"updating-subscription-provider"},"Updating subscription provider"),(0,i.yg)("p",null,"Before requesting payments a status callback URL must be set by calling ",(0,i.yg)("inlineCode",{parentName:"p"},"PATCH /api/providers/{providerId}"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-json",metastring:'title="Payment status callback URL"',title:'"Payment',status:!0,callback:!0,'URL"':!0},'[\n    {\n        "value": "https://merchant.dk/notifications_from_mobilepay/payments",\n        "path": "/payment_status_callback_url",\n        "op": "replace"\n    }\n]\n')))}d.isMDXComponent=!0}}]);