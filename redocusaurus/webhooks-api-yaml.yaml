openapi: 3.0.3
info:
  title: Webhooks API
  description: >-
    <br/> MobilePay Webhooks API makes it easy for you to register to webhooks.


    Currently supported events about payments (those that start with
    `payment.*`) are only **about payments from "App payments"** product.


    Event `transfer.succeeded` is generic and supports all products.
  contact:
    email: developer@vippsmobilepay.com
servers:
  - url: https://api.mobilepay.dk
    description: Production server (uses **live** data)
  - url: https://api.sandbox.mobilepay.dk
    description: Production server (uses **test** data)
paths:
  /v1/webhooks:
    get:
      summary: fetch all webhooks
      operationId: get-webhooks-list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMultipleWebhooksResponse'
        '401':
          description: Unauthorized
        '409':
          description: Conflict
    post:
      summary: create webhook
      operationId: create-webhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWebhookRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleWebhookResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '409':
          description: Conflict
  /v1/webhooks/{webhookid}:
    put:
      summary: update webhook
      operationId: update-webhook
      parameters:
        - name: webhookid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWebhookRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleWebhookResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict
    get:
      summary: fetch single webhook
      operationId: get-webhook
      parameters:
        - name: webhookid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleWebhookResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict
    delete:
      summary: delete webhook
      operationId: delete-webhook
      parameters:
        - name: webhookid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '409':
          description: Conflict
  /v1/webhooks/{webhookid}/publishtestnotification:
    post:
      summary: publish test notification to a specified webhook
      operationId: publish-test-notification
      parameters:
        - name: webhookid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: There was an error sending the test notification to webhook.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  parameters:
    correlationIdParam:
      name: CorrelationId
      in: header
      required: false
      description: >-
        Correlation id used for logging (if you don't pass any value, we'll
        generate it)
      schema:
        type: string
        format: uuid
  schemas:
    CreateWebhookRequest:
      required:
        - events
        - url
      type: object
      properties:
        url:
          type: string
          format: url
          description: >-
            URL to where webhook requests will be sent. Must be HTTPS. Scheme
            and host will be converted to lower case. Result can be seen in the
            response.
        events:
          type: array
          items:
            type: string
            enum:
              - payment.reserved
              - payment.expired
              - paymentpoint.activated
              - payment.cancelled_by_user
              - transfer.succeeded
          description: |
            List of subscribed events.
        paymentPointId:
          type: string
          description: >-
            Optional. Webhook will receive notifications only coming from
            specified payment point.
          format: uuid
          nullable: true
    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          nullable: true
          example: '1234'
        message:
          type: string
          nullable: true
          example: >-
            Error message explaining the error that happened while processing
            the request
        correlationId:
          type: string
          nullable: true
          example: 91f2b05f-2171-4cea-9d5a-1cdbed6ae2cd
        origin:
          type: string
          nullable: true
          example: WBH
    GetMultipleWebhooksResponse:
      required:
        - webhooks
      type: object
      properties:
        webhooks:
          type: array
          items:
            $ref: '#/components/schemas/SingleWebhookResponse'
          description: The requested list of webhooks.
    SingleWebhookResponse:
      required:
        - events
        - signatureKey
        - url
        - webhookId
      type: object
      properties:
        webhookId:
          type: string
          description: Unique identifier for the object.
          format: uuid
          example: e4a2e195-74f6-42e1-a172-83291c9d2a41
        url:
          type: string
          format: url
          description: The URL of the webhook endpoint.
          example: https://www.my-site.com/webhooks
        events:
          type: array
          items:
            type: string
            enum:
              - payment.reserved
              - payment.expired
              - paymentpoint.activated
              - payment.cancelled_by_user
              - transfer.succeeded
          description: List of subscribed events.
          example:
            - payment.reserved
        signatureKey:
          type: string
          description: The webhook's secret is used to generate webhook signatures.
          example: my-secure-signature-key
        paymentPointId:
          type: string
          description: Payment point for which the webhook received notifications.
          format: uuid
          nullable: true
          example: bc2d4b85-3b0a-4aa4-b568-12a186a862b5
    UpdateWebhookRequest:
      required:
        - events
        - url
      type: object
      properties:
        url:
          type: string
          format: url
          description: >-
            URL to where webhook requests will be sent. Must be HTTPS. Scheme
            and host will be converted to lower case. Result can be seen in the
            response.
        events:
          type: array
          items:
            type: string
            enum:
              - payment.reserved
              - payment.expired
              - paymentpoint.activated
              - payment.cancelled_by_user
              - transfer.succeeded
          description: |
            List of subscribed events.
        paymentPointId:
          type: string
          description: >-
            Optional. Webhook will receive notifications only coming from
            specified payment point.
          format: uuid
          nullable: true
  securitySchemes:
    apiKey:
      type: http
      scheme: bearer
      bearerFormat: API key
      description: >-
        Authorization header using the Bearer scheme, e.g., `Authorization:
        Bearer {api key}`
    openId:
      type: openIdConnect
      openIdConnectUrl: >-
        https://api.mobilepay.dk/merchant-authentication-openidconnect/.well-known/openid-configuration
      description: >-
        Obtain a consent from your client (with scope `webhooks`), retrieve an
        acess token and send it in `Authorization` header using the Bearer
        scheme,  e.g., `Authorization: Bearer {access token}`
security:
  - apiKey: []
  - openId:
      - webhooks
